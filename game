// Define the function within an immediately invoked function expression (IIFE) to avoid global namespace pollution
(function() {
    // Create canvas element and set its attributes
    let canvas = document.createElement("canvas");
    canvas.id = "gameCanvas";
    canvas.width = 400;
    canvas.height = 400;
    document.body.appendChild(canvas);
    
    // Get 2D rendering context
    let ctx = canvas.getContext("2d");

    // Create color input element for background color
    let colorInput = document.createElement("input");
    colorInput.type = "color";
    colorInput.id = "backgroundColor";
    colorInput.value = "#ffffff";
    document.body.insertBefore(colorInput, canvas.nextSibling);

    // Create buttons for play, pause, quit
    let playButton = document.createElement("button");
    playButton.id = "playButton";
    playButton.innerText = "Play";
    document.body.appendChild(playButton);

    let pauseButton = document.createElement("button");
    pauseButton.id = "pauseButton";
    pauseButton.innerText = "Pause";
    pauseButton.disabled = true;
    document.body.appendChild(pauseButton);

    let quitButton = document.createElement("button");
    quitButton.id = "quitButton";
    quitButton.innerText = "Quit";
    document.body.appendChild(quitButton);

    // Create elements for score and high scores
    let scoreElement = document.createElement("div");
    scoreElement.id = "score";
    scoreElement.innerText = "Score: 0";
    document.body.appendChild(scoreElement);

    let highScoresElement = document.createElement("div");
    highScoresElement.id = "highScores";
    highScoresElement.innerText = "High Scores:";
    document.body.appendChild(highScoresElement);

    // Create buttons for game modes
    let normalModeButton = document.createElement("button");
    normalModeButton.id = "normalModeButton";
    normalModeButton.innerText = "Normal Mode";
    document.body.appendChild(normalModeButton);

    let infiniteModeButton = document.createElement("button");
    infiniteModeButton.id = "infiniteModeButton";
    infiniteModeButton.innerText = "Infinite Mode";
    document.body.appendChild(infiniteModeButton);

    // Array to store snake segments and other variables
    let snakeSegments = [{x: 10, y: 10}];
    let food = {x: 15, y: 10};
    let score = 0;
    let dx = 0;
    let dy = 0;
    let running = false;
    let paused = false;
    let intervalId = 0;
    let mode = "normal";
    let highScores = JSON.parse(localStorage.getItem("snakeHighScores")) || [];

    // Function to generate food position
    function generateFood() {
        food = {x: Math.floor(Math.random() * 20), y: Math.floor(Math.random() * 20)};
    }

    // Function to draw game
    function draw() {
        // Drawing code here
    }

    // Function to handle key press events
    function handleKeyPress(event) {
        // Key press handling code here
    }

    // Function to start or restart the game
    function startGame() {
        // Game start code here
    }

    // Function to pause or resume the game
    function togglePause() {
        // Pause/resume code here
    }

    // Function to end the game
    function endGame() {
        // Game over code here
    }

    // Function to switch to normal mode
    function switchToNormalMode() {
        // Mode switch code here
    }

    // Function to switch to infinite mode
    function switchToInfiniteMode() {
        // Mode switch code here
    }

    // Function to update high scores
    function updateHighScores() {
        // High scores update code here
    }

    // Event listeners for buttons
    playButton.addEventListener("click", startGame);
    pauseButton.addEventListener("click", togglePause);
    quitButton.addEventListener("click", endGame);
    normalModeButton.addEventListener("click", switchToNormalMode);
    infiniteModeButton.addEventListener("click", switchToInfiniteMode);
    colorInput.addEventListener("change", function() {
        canvas.style.backgroundColor = colorInput.value;
    });
    document.addEventListener("keydown", handleKeyPress);
})();
