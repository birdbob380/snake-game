javascript:(function(){
    const canvas = document.createElement('canvas');
    canvas.id = 'gameCanvas';
    canvas.width = 400;
    canvas.height = 400;
    document.body.appendChild(canvas);

    // Rest of the game code goes here...
    document.addEventListener('DOMContentLoaded', () => {
    const canvas = document.createElement('canvas');
    canvas.id = 'gameCanvas';
    canvas.width = 400;
    canvas.height = 400;
    document.body.appendChild(canvas);

    const context = canvas.getContext('2d');
    const backgroundColorPicker = document.createElement('input');
    backgroundColorPicker.type = 'color';
    backgroundColorPicker.id = 'backgroundColor';
    backgroundColorPicker.value = '#ffffff';
    document.body.insertBefore(backgroundColorPicker, canvas.nextSibling);

    const playButton = document.createElement('button');
    playButton.id = 'playButton';
    playButton.innerText = 'Play';
    document.body.appendChild(playButton);

    const pauseButton = document.createElement('button');
    pauseButton.id = 'pauseButton';
    pauseButton.innerText = 'Pause';
    pauseButton.disabled = true;
    document.body.appendChild(pauseButton);

    const quitButton = document.createElement('button');
    quitButton.id = 'quitButton';
    quitButton.innerText = 'Quit';
    document.body.appendChild(quitButton);

    const scoreDiv = document.createElement('div');
    scoreDiv.id = 'score';
    scoreDiv.innerText = 'Score: 0';
    document.body.appendChild(scoreDiv);

    const highScoresDiv = document.createElement('div');
    highScoresDiv.id = 'highScores';
    highScoresDiv.innerText = 'High Scores:';
    document.body.appendChild(highScoresDiv);

    const normalModeButton = document.createElement('button');
    normalModeButton.id = 'normalModeButton';
    normalModeButton.innerText = 'Normal Mode';
    document.body.appendChild(normalModeButton);

    const infiniteModeButton = document.createElement('button');
    infiniteModeButton.id = 'infiniteModeButton';
    infiniteModeButton.innerText = 'Infinite Mode';
    document.body.appendChild(infiniteModeButton);

    const tileSize = 20;
    const canvasSize = 20;
    let snake = [{ x: 10, y: 10 }];
    let apple = { x: 15, y: 10 };
    let dx = 0;
    let dy = 0;
    let interval;
    let isPlaying = false;
    let isPaused = false;
    let score = 0;
    let highScores = JSON.parse(localStorage.getItem('snakeHighScores')) || [];
    let gameMode = 'normal'; // Default game mode

    // Add event listeners

    playButton.addEventListener('click', startGame);
    pauseButton.addEventListener('click', pauseGame);
    quitButton.addEventListener('click', quitGame);
    normalModeButton.addEventListener('click', switchToNormalMode);
    infiniteModeButton.addEventListener('click', switchToInfiniteMode);
    backgroundColorPicker.addEventListener('change', setBackgroundColor);

    // Initial display of high scores
    displayHighScores();

    // Functions

    function drawSnake() {
        snake.forEach(segment => {
            context.fillStyle = '#4CAF50'; // Green color for snake segments
            context.fillRect(segment.x * tileSize, segment.y * tileSize, tileSize, tileSize);
        });
    }

    function drawApple() {
        context.fillStyle = 'red';
        context.beginPath();
        context.arc((apple.x + 0.5) * tileSize, (apple.y + 0.5) * tileSize, tileSize / 2, 0, Math.PI * 2);
        context.fill();
    }

    function moveSnake() {
        const head = { x: snake[0].x + dx, y: snake[0].y + dy };

        // Wrapping around the canvas in Infinite Mode
        if (gameMode === 'infinite') {
            if (head.x < 0) head.x = canvasSize - 1;
            if (head.x >= canvasSize) head.x = 0;
            if (head.y < 0) head.y = canvasSize - 1;
            if (head.y >= canvasSize) head.y = 0;
        }

        snake.unshift(head);

        if (head.x === apple.x && head.y === apple.y) {
            generateNewApple();
            score += 10;
            document.getElementById('score').innerText = 'Score: ' + score;
        } else {
            snake.pop();
        }

        if (gameMode === 'normal' && checkCollision()) {
            endGame();
        }
    }

    function generateNewApple() {
        apple = {
            x: Math.floor(Math.random() * canvasSize),
            y: Math.floor(Math.random() * canvasSize)
        };
    }

    function checkCollision() {
        if (
            snake[0].x < 0 ||
            snake[0].x >= canvasSize ||
            snake[0].y < 0 ||
            snake[0].y >= canvasSize ||
            snake.slice(1).some(segment => segment.x === snake[0].x && segment.y === snake[0].y)
        ) {
            return true;
        }
        return false;
    }

    function updateGame() {
        context.clearRect(0, 0, canvas.width, canvas.height);
        drawSnake();
        drawApple();
        moveSnake();
    }

    function startGame() {
        if (!isPlaying) {
            snake = [{ x: 10, y: 10 }];
            dx = 0;
            dy = 0;
            generateNewApple();
            interval = setInterval(updateGame, 75);
            isPlaying = true;
            pauseButton.disabled = false;
        }
    }

    function pauseGame() {
        if (isPlaying) {
            if (isPaused) {
                interval = setInterval(updateGame, 75);
                pauseButton.innerText = 'Pause';
            } else {
                clearInterval(interval);
                pauseButton.innerText = 'Resume';
            }
            isPaused = !isPaused;
        }
    }

    function endGame() {
        clearInterval(interval);
        isPlaying = false;
        pauseButton.disabled = true;
        if (score > 0) {
            updateHighScores();
        }
        score = 0;
        document.getElementById('score').innerText = 'Score: ' + score;
        alert('Game Over! Your score: ' + score);
    }

    function updateHighScores() {
        highScores.push(score);
        highScores.sort((a, b) => b - a);
        highScores = highScores.slice(0, 5); // Keep only top 5 scores
        localStorage.setItem('snakeHighScores', JSON.stringify(highScores));
        displayHighScores();
    }

    function displayHighScores() {
        const highScoresContainer = document.getElementById('highScores');
        highScoresContainer.innerHTML = 'High Scores:<br>';
        highScores.forEach((score, index) => {
            highScoresContainer.innerHTML += (index + 1) + '. ' + score + '<br>';
        });
    }

    function switchToNormalMode() {
        gameMode = 'normal';
        playButton.innerText = 'Play Normal Mode';
    }

    function switchToInfiniteMode() {
        gameMode = 'infinite';
        playButton.innerText = 'Play Infinite Mode';
    }

    function quitGame() {
        clearInterval(interval);
        isPlaying = false;
        score = 0;
        document.getElementById('score').innerText = 'Score: ' + score;
        alert('Game Quit!');
    }

    function setBackgroundColor() {
        const backgroundColor = backgroundColorPicker.value;
        canvas.style.backgroundColor = backgroundColor;
    }

    document.addEventListener('keydown', event => {
        if (event.key === 'ArrowUp' && dy === 0) {
            dx = 0;
            dy = -1;
        } else if (event.key === 'ArrowDown' && dy === 0) {
            dx = 0;
            dy = 1;
        } else if (event.key === 'ArrowLeft' && dx === 0) {
            dx = -1;
            dy = 0;
        } else if (event.key === 'ArrowRight' && dx === 0) {
            dx = 1;
            dy = 0;
        } else if (event.key === 'p' || event.key === 'P') { // Press 'P' key for pausing
            pauseGame();
        }
    });
});

})();
